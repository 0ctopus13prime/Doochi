/*
 *
 * Copyright (c) 2018-2019 Doo Yong Kim. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include <Util/Bytes.h>
#include <Document/Document.h>
#include <Document/Field.h>
#include <gtest/gtest.h>

using lucene::core::util::BytesRef;
using lucene::core::document::Document;
using lucene::core::document::Field;
using lucene::core::document::TextField;
using lucene::core::document::StringField;
using lucene::core::document::StoredField;
using lucene::core::document::NumericDocValuesField;
using lucene::core::document::FloatDocValuesField;
using lucene::core::document::DoubleDocValuesField;
using lucene::core::document::BinaryDocValuesField;
using lucene::core::document::SortedDocValuesField;

TEST(DOCUMENT__TESTS, BASIC__TEST) {
  Document document;
  if (document.Get("abc")) {
    FAIL();
  }  
}

TEST(DOCUMENT__TESTS, ADD__FIELD__TEST) {
  std::string text_field_name("text_field");
  std::string text_field_value("If a catch block handles multiple exception, "
                               "you can separate them using a pipe (|) and in "
                               "this case exception parameter (ex) is final, "
                               "so you can't change it. "
                               "The byte code generated by this feature is "
                               "smaller and reduce code redundancy.");

  std::string str_field_name("str_field");
  std::string str_field_value("Java Catch Multiple Exceptions, "
                              "Rethrow Exception");

  std::string stored_field_name("stored_field");
  int32_t stored_field_value = 12341234;

  std::string num_doc_values_field_name("num_doc_values_field");
  int64_t num_doc_values_field_value = 12313123123L;

  std::string float_doc_values_field_name("float_doc_values_field");
  float float_doc_values_field_value = 123131.23123F;

  std::string double_doc_values_field_name("double_doc_values_field");
  double double_doc_values_field_value = 123131.23123;

  std::string bin_doc_values_field_name("bin_doc_values_field");
  BytesRef
  bin_doc_values_field_value(std::string("C1DBSSSJSDF7F78FF").c_str(), 17);

  for (uint32_t i = 0 ; i < 100000 ; ++i) {
    Document document(100);
    document.Add(new TextField(text_field_name,
                               text_field_value,
                               Field::Store::NO));
    document.Add(new StringField(str_field_name,
                                 str_field_value,
                                 Field::Store::YES));
    document.Add(new StoredField(stored_field_name, stored_field_value));
    document.Add(new NumericDocValuesField(num_doc_values_field_name,
                                           num_doc_values_field_value));
    document.Add(new FloatDocValuesField(float_doc_values_field_name,
                                         float_doc_values_field_value));
    document.Add(new DoubleDocValuesField(double_doc_values_field_name,
                                          double_doc_values_field_value));
    document.Add(new BinaryDocValuesField(bin_doc_values_field_name,
                                          bin_doc_values_field_value));
    document.Add(new SortedDocValuesField(bin_doc_values_field_name,
                                          bin_doc_values_field_value));
  }
}

int main(int argc, char* argv[]) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
