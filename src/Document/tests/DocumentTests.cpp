/*
 *
 * Copyright (c) 2018-2019 Doo Yong Kim. All rights reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#include <Util/Bytes.h>
#include <Util/Numeric.h>
#include <Document/Document.h>
#include <Document/Field.h>
#include <gtest/gtest.h>

using lucene::core::util::BytesRef;
using lucene::core::document::Document;
using lucene::core::document::Field;
using lucene::core::document::TextField;
using lucene::core::document::StringField;
using lucene::core::document::StoredField;
using lucene::core::document::NumericDocValuesField;
using lucene::core::document::FloatDocValuesField;
using lucene::core::document::DoubleDocValuesField;
using lucene::core::document::BinaryDocValuesField;
using lucene::core::document::SortedDocValuesField;
using lucene::core::document::SortedSetDocValuesField;
using lucene::core::document::BinaryPoint;
using lucene::core::document::DoubleRange;
using lucene::core::document::FloatRange;
using lucene::core::document::IntRange;
using lucene::core::document::LongRange;
using lucene::core::document::DoublePoint;
using lucene::core::document::FloatPoint;
using lucene::core::document::IntPoint;
using lucene::core::document::LongPoint;

TEST(DOCUMENT__TESTS, BASIC__TEST) {
  Document document;

  if (document.Get("abc")) {
    FAIL();
  }  
}

TEST(DOCUMENT__TESTS, ADD__FIELD__TEST) {
  std::string text_field_name("text_field");
  std::string text_field_value("If a catch block handles multiple exception, "
                               "you can separate them using a pipe (|) and in "
                               "this case exception parameter (ex) is final, "
                               "so you can't change it. "
                               "The byte code generated by this feature is "
                               "smaller and reduce code redundancy.");

  std::string str_field_name("str_field");
  std::string str_field_value("Java Catch Multiple Exceptions, "
                              "Rethrow Exception");

  std::string stored_field_name("stored_field");
  int32_t stored_field_value = 12341234;

  std::string num_doc_values_field_name("num_doc_values_field");
  int64_t num_doc_values_field_value = 12313123123L;

  std::string float_doc_values_field_name("float_doc_values_field");
  float float_doc_values_field_value = 123131.23123F;

  std::string double_doc_values_field_name("double_doc_values_field");
  double double_doc_values_field_value = 123131.23123;

  std::string bin_doc_values_field_name("bin_doc_values_field");
  BytesRef
  bin_doc_values_field_value(std::string("C1DBSSSJSDF7F78FF").c_str(), 17);

  Document document(100);
  for (uint32_t i = 0 ; i < 10000 ; ++i) {
    document.Add(TextField(text_field_name,
                           text_field_value,
                           Field::Store::NO));
    document.Add(StringField(str_field_name,
                             str_field_value,
                             Field::Store::YES));
    document.Add(StoredField(stored_field_name, stored_field_value));
    document.Add(NumericDocValuesField(num_doc_values_field_name,
                                       num_doc_values_field_value));
    document.Add(FloatDocValuesField(float_doc_values_field_name,
                                     float_doc_values_field_value));
    document.Add(DoubleDocValuesField(double_doc_values_field_name,
                                      double_doc_values_field_value));
    document.Add(BinaryDocValuesField(bin_doc_values_field_name,
                                      bin_doc_values_field_value));
    document.Add(SortedDocValuesField(bin_doc_values_field_name,
                                          bin_doc_values_field_value));
    document.Clear();
  }
}

TEST(DOCUMENT__TESTS, DOC__OPERATION__TEST) {
  uint32_t field_num = 19;

  Document document(100);
  // Text field
  std::string text_field_name("text_field");
  std::string text_field_value("If a catch block handles multiple exception, "
                               "you can separate them using a pipe (|) and in "
                               "this case exception parameter (ex) is final, "
                               "so you can't change it. "
                               "The byte code generated by this feature is "
                               "smaller and reduce code redundancy.");

  document.Add(TextField(text_field_name,
                         text_field_value,
                         Field::Store::NO));

  // String field
  std::string str_field_name("str_field");
  std::string str_field_value("Java Catch Multiple Exceptions, "
                              "Rethrow Exception");

  document.Add(StringField(str_field_name,
                           str_field_value,
                           Field::Store::YES));

  // StoredField
  std::string stored_field_name("stored_field");
  int32_t stored_field_value = 12341234;

  document.Add(StoredField(stored_field_name, stored_field_value));

  // NumericDocValuesField
  std::string num_doc_values_field_name("num_doc_values_field");
  int64_t num_doc_values_field_value = 12313123123L;

  document.Add(NumericDocValuesField(num_doc_values_field_name,
                                     num_doc_values_field_value));

  // FloatDocValuesField
  std::string float_doc_values_field_name("float_doc_values_field");
  float float_doc_values_field_value = 123131.23123F;
  document.Add(FloatDocValuesField(float_doc_values_field_name,
                                   float_doc_values_field_value));

  // DoubleDocValuesField
  std::string double_doc_values_field_name("double_doc_values_field");
  double double_doc_values_field_value = 123131.23123;

  document.Add(DoubleDocValuesField(double_doc_values_field_name,
                                    double_doc_values_field_value));

  // BinaryDocValuesField, SortedDocValuesField
  std::string bin_doc_values_field_name("bin_doc_values_field");
  BytesRef
  bin_doc_values_field_value(std::string("C1DBSSSJSDF7F78FF").c_str(), 17);

  document.Add(BinaryDocValuesField(bin_doc_values_field_name,
                                    bin_doc_values_field_value));
  document.Add(SortedDocValuesField(bin_doc_values_field_name,
                                        bin_doc_values_field_value));

  // SortedNumericDocValuesField
  std::string stored_f("sorted_numeric_dv");
  const int64_t stored_v = 123456L;
  document.Add(StoredField(stored_f, stored_v));

  // SortedSetDocValuesField
  std::string sorted_set_dv_f("sorted_set_dv");
  BytesRef sorted_set_dv_val("foo");
  document.Add(SortedSetDocValuesField(sorted_set_dv_f, sorted_set_dv_val));

  // BinaryPoint
  std::string binary_point_f("binary_point");
  char binary_points[2][3] = {
    {0x1, 0x2, 0x3},
    {0x7, 0x8, 0x55}
  };
  document.Add(BinaryPoint(binary_point_f, &binary_points[0][0], 2, 3));

  // DoublePoint
  std::string double_point_f("double_point");
  document.Add(DoublePoint(double_point_f, {1.23, 2.34}));

  // DoubleRange
  std::string double_range_f("double_range");
  double min[3] = { 1.23, 2.34, 123123.123123 };
  double max[3] = { 12.34, 123.44, 4345345.2342 };
  document.Add(DoubleRange(double_range_f, min, max, 3));

  // FloatPoint
  std::string float_point_f("float_point");
  float float_points[3] = {1.23F, 12312.123F, 99939.1231F};
  document.Add(FloatPoint(float_point_f, float_points, 3));

  // FloatRange
  std::string float_range_f("float_range");
  float float_range_min[4] = {12.123F, 345.234F, 19294.123F};
  float float_range_max[4] = {4812.12312F, 12312.123099F, 81238.123F};
  document.Add(FloatRange(float_range_f,
                          float_range_min,
                          float_range_max,
                          4));

  // IntPoint
  std::string int_point_f("int_point");
  int32_t int_points[3] = {123525, 12348, 85812};
  document.Add(IntPoint(int_point_f, int_points, 3));

  // IntRange
  std::string int_range_f("int_range");
  int32_t int_range_min[3] = {818, 12399, 94949};
  int32_t int_range_max[3] = {12838, 58348, 19239123};
  document.Add(IntRange(int_range_f, int_range_min, int_range_max, 3));

  // LongPoint
  std::string long_point_f("long_point");
  int64_t long_points[3] = {123525L, 12348L, 85812L};
  document.Add(LongPoint(long_point_f, long_points, 3));

  // LongRange
  std::string long_range_f("long_range");
  int64_t long_range_min[3] = {818L, 12399L, 94949L};
  int64_t long_range_max[3] = {12838L, 58348L, 112319239L};
  document.Add(LongRange(long_range_f, long_range_min, long_range_max, 3));

  ASSERT_EQ(field_num, document.Size()); 

  Field* got_fields[field_num];
  ASSERT_EQ(2, document.GetFields(bin_doc_values_field_name, got_fields));
  ASSERT_EQ(1, document.GetFields(text_field_name, got_fields));

  ASSERT_TRUE(document.GetBinaryValue(bin_doc_values_field_name));

  std::string* got_values[field_num];
  ASSERT_EQ(1, document.GetValues(str_field_name, got_values));

  BytesRef* got_bytes_refs[field_num];
  ASSERT_EQ(2, document.GetBinaryValues(bin_doc_values_field_name,
                                        got_bytes_refs));

  ASSERT_TRUE(document.Get(str_field_name));
  ASSERT_FALSE(document.Get("no_exists_field_name"));

  document.RemoveField(text_field_name);
  ASSERT_FALSE(document.GetField(text_field_name));

  ASSERT_EQ(field_num - 1, document.Size()); 
  document.RemoveFields(bin_doc_values_field_name);
  ASSERT_EQ(document.Size(), field_num - 3);
  ASSERT_FALSE(document.GetField(bin_doc_values_field_name));

  document.Clear();
  ASSERT_EQ(0, document.Size());
}

int main(int argc, char* argv[]) {
  ::testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
